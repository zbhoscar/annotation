function varargout = DataSet_export(varargin)
% DATASET_EXPORT MATLAB code for DataSet_export.fig
%      DATASET_EXPORT, by itself, creates a new DATASET_EXPORT or raises the existing
%      singleton*.
%
%      H = DATASET_EXPORT returns the handle to a new DATASET_EXPORT or the handle to
%      the existing singleton*.
%
%      DATASET_EXPORT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in DATASET_EXPORT.M with the given input arguments.
%
%      DATASET_EXPORT('Property','Value',...) creates a new DATASET_EXPORT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before DataSet_export_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to DataSet_export_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help DataSet_export

% Last Modified by GUIDE v2.5 14-Dec-2017 15:48:19

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @DataSet_export_OpeningFcn, ...
    'gui_OutputFcn',  @DataSet_export_OutputFcn, ...
    'gui_LayoutFcn',  @DataSet_export_LayoutFcn, ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before DataSet_export is made visible.
function DataSet_export_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to DataSet_export (see VARARGIN)

% Choose default command line output for DataSet_export
handles.output = hObject;
setappdata(handles.DS_Figure,'Cflag',0);%Classification flag
setappdata(handles.DS_Figure,'Hflag',0);%Height flag
setappdata(handles.DS_Figure,'SVflag',0);%Save flag
setappdata(handles.DS_Figure,'NEXflag',0);%Next flag
set(handles.PDE,'Enable','off');
set(handles.VEC,'Enable','off');
set(handles.CYC,'Enable','off');
set(handles.PRE,'Enable','off');
set(handles.NEX,'Enable','off');
set(handles.FRM,'Enable','off');
set(handles.H_D,'Enable','off');
set(handles.H_T,'Enable','off');
set(handles.DEL,'Enable','off');
set(handles.SV,'Enable','off');
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes DataSet_export wait for user response (see UIRESUME)
% uiwait(handles.DS_Figure);


% --- Outputs from this function are returned to the command line.
function varargout = DataSet_export_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in PDE.
function PDE_Callback(hObject, eventdata, handles)
% hObject    handle to PDE (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
setappdata(handles.DS_Figure,'Cflag',1);
setappdata(handles.DS_Figure,'color','r');
% --- Executes on button press in VEC.
function VEC_Callback(hObject, eventdata, handles)
% hObject    handle to VEC (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
setappdata(handles.DS_Figure,'Cflag',2);
setappdata(handles.DS_Figure,'color','g');
% --- Executes on button press in CYC.
function CYC_Callback(hObject, eventdata, handles)
% hObject    handle to CYC (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
setappdata(handles.DS_Figure,'Cflag',3);
setappdata(handles.DS_Figure,'color','m');


function DEL_Callback(hObject, eventdata, handles)
% hObject    handle to DEL (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
NEXflag = getappdata(handles.DS_Figure,'NEXflag');
if NEXflag == 0
    btnName = questdlg('是否删除所有标注结果','警告','确定删除','取消','取消');
else
    btnName = '确定删除';
end
if strcmp(btnName,'确定删除')
    CFtemp = getappdata(handles.axes_laser,'ClassFlag');
    Vt2dtemp = getappdata(handles.axes_laser,'Vertex2d');
    HDtemp = getappdata(handles.axes_laser,'H_D');
    HTtemp = getappdata(handles.axes_laser,'H_T');
    Otemp = getappdata(handles.axes_laser,'Direct');
    SPttemp = getappdata(handles.axes_laser,'SlcPoint');
    CBtemp = getappdata(handles.axes_laser,'Cube');
    CB2dtemp = getappdata(handles.axes_laser,'Cube2d');
    if ~isempty(CFtemp)
        CFtemp = [];
        setappdata(handles.axes_laser,'ClassFlag',CFtemp);
    end
    if ~isempty(Vt2dtemp)
        Vt2dtemp = [];
        setappdata(handles.axes_laser,'Vertex2d',Vt2dtemp);
    end
    if ~isempty(HDtemp)
        HDtemp = [];
        setappdata(handles.axes_laser,'H_D',HDtemp);
        if ~isempty(HDtemp)
            set(handles.H_D,'String',num2str(HDtemp(end)));
        else
            set(handles.H_D,'String','');
        end;
    end
    if ~isempty(HTtemp)
        HTtemp = [];
        setappdata(handles.axes_laser,'H_T',HTtemp);
        if ~isempty(HTtemp)
            set(handles.H_T,'String',num2str(HTtemp(end)));
        else
            set(handles.H_T,'String','');
        end
    end
    if ~isempty(Otemp)
        Otemp = [];
        setappdata(handles.axes_laser,'Direct',Otemp);
    end
    if ~isempty(SPttemp)
        delete(SPttemp);
        SPttemp = [];
        setappdata(handles.axes_laser,'SlcPoint',SPttemp);
    end
    if ~isempty(CBtemp)
        delete(CBtemp);
        CBtemp = [];
        if isempty(CBtemp)
            set(handles.H_D,'Enable','off');
            set(handles.H_T,'Enable','off');
            set(handles.DEL,'Enable','off');
            set(handles.SV,'Enable','off');
        end
        setappdata(handles.axes_laser,'Cube',CBtemp);
    end
    if ~isempty(CB2dtemp)
        delete(CB2dtemp);
        CB2dtemp = [];
        setappdata(handles.axes_laser,'Cube2d',CB2dtemp);
    end
    setappdata(handles.DS_Figure,'SVflag',0);
end
% --- Executes on button press in PRE.
function PRE_Callback(hObject, eventdata, handles)
% hObject    handle to PRE (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Ind = getappdata(handles.DS_Figure,'Index');
setappdata(handles.DS_Figure,'Index',Ind-1);
Ind = num2str(Ind-1);
set(handles.FRM,'String',Ind);
FRM_Callback(handles.FRM, eventdata, handles);
% --- Executes on button press in NEX.
function NEX_Callback(hObject, eventdata, handles)
% hObject    handle to NEX (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
SVflag = getappdata(handles.DS_Figure,'SVflag');
if SVflag == 0
    btnName = questdlg('是否保存标注结果','提示','保存','不保存','取消','保存');
    switch btnName
        case '保存'
            SV_Callback(handles.axes_laser, eventdata, handles);
        case '取消'
            return
        case ' '
            return
        case '不保存'
    end
end
setappdata(handles.DS_Figure,'NEXflag',1);
Ind = getappdata(handles.DS_Figure,'Index');
setappdata(handles.DS_Figure,'Index',Ind+1);
Ind = num2str(Ind+1);
set(handles.FRM,'String',Ind);
FRM_Callback(handles.FRM, eventdata, handles);
DEL_Callback(handles.DEL, eventdata, handles);
setappdata(handles.DS_Figure,'SVflag',0);
setappdata(handles.DS_Figure,'NEXflag',0);

function axes_laser_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to axes_laser (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
pFlag = getappdata(handles.DS_Figure,'PressFlag');
if pFlag == 0
    return
end
CFlag = getappdata(handles.DS_Figure,'Cflag');
num = length(getappdata(handles.DS_Figure,'ClassFlag'));
if CFlag == 0
    return
end
clr = getappdata(handles.DS_Figure,'color');
if strcmp(get(handles.DS_Figure,'SelectionType'),'normal')
    for i = 1:4
        % pt = get(gca,'CurrentPoint');
        % axes(handles.axes_laser);
        pt = ginput(1);
        X(i,1) = pt(1,1);
        X(i,2) = pt(1,2);
        if i<3
            Pt(i) = plot(X(i,1),X(i,2),['o',clr]);
            Y(i,:) = X(i,:);
        end
        if i == 2
            L(1) = line(Y(1:2,1),Y(1:2,2),'color',clr,'tag',[num2str(num),'.1'],'ButtondownFcn',{@Recfun,handles});
        end
        if i == 3
            Y(3,:) = X(3,:)+(X(1,:)-X(2,:))*((X(3,:)-X(2,:))*(X(2,:)-X(1,:))')/((X(2,:)-X(1,:))*(X(2,:)-X(1,:))');
            Pt(3) = plot(Y(3,1),Y(3,2),['o',clr]);
            Y(4,:) = Y(3,:)+(X(1,:)-X(2,:));
            Pt(4) = plot(Y(4,1),Y(4,2),['o',clr]);
            L(2) = line(Y(2:3,1),Y(2:3,2),'color',clr,'tag',[num2str(num),'.2'],'ButtondownFcn',{@Recfun,handles});
            L(3) = line(Y([4,3],1),Y([4,3],2),'color',clr,'tag',[num2str(num),'.3'],'ButtondownFcn',{@Recfun,handles});
            L(4) = line(Y([1,4],1),Y([1,4],2),'color',clr,'tag',[num2str(num),'.4'],'ButtondownFcn',{@Recfun,handles});
        end
        if i==4
            O(1,:) = (Y(2,:)+Y(3,:))/2+(Y(1,:)-Y(2,:))/2;
            Pt(5) = plot(O(1,1),O(1,2),['o',clr]);
            flag1 = (Y(2,:)-O(1,:))*(X(4,:)-O(1,:))';
            flag2 = (Y(3,:)-O(1,:))*(X(4,:)-O(1,:))';
            if flag1>0
                if flag2>0
                    O(2,:) = O(1,:)+3/4*(Y(2,:)-Y(1,:));
                else
                    O(2,:) = O(1,:)+3/4*(Y(2,:)-Y(3,:));
                end
            else
                if flag2>0
                    O(2,:) = O(1,:)-3/4*(Y(2,:)-Y(3,:));
                else
                    O(2,:) = O(1,:)-3/4*(Y(2,:)-Y(1,:));
                end
            end
            L(5) = line(O(:,1),O(:,2),'color',clr);
        end
    end
    %% 存储物体类别标签
    ClassFlag = getappdata(hObject,'ClassFlag');
    ClassFlag = [ClassFlag,CFlag];
    setappdata(hObject,'ClassFlag',ClassFlag);
    %% 存储选择的方向
    Direct = getappdata(hObject,'Direct');
    Direct = [Direct;O];
    setappdata(hObject,'Direct',Direct);
    %% 存储选择的四个点
    Vertex2d = getappdata(hObject,'Vertex2d');
    Vertex2d = [Vertex2d;Y];
    setappdata(hObject,'Vertex2d',Vertex2d);
    %% 标记在矩形框中的点并存储
    pcData = getappdata(handles.DS_Figure,'pcData');
    in = inpolygon(pcData(:,1),pcData(:,2),Y(:,1),Y(:,2));
    if isempty(pcData(in,:))
        ClassFlag(end) = [];
        setappdata(hObject,'ClassFlag',ClassFlag);
        Direct(end-1:end,:) = [];
        setappdata(hObject,'Direct',Direct);
        Vertex2d(end-3:end,:) = [];
        setappdata(hObject,'Vertex2d',Vertex2d);
        delete(L);
        delete(Pt);
        return
    end
    axes(handles.axes_laser);
    SPt = plot3(pcData(in,1),pcData(in,2),pcData(in,3),['d',clr]);
    SlcPoint = getappdata(hObject,'SlcPoint');
    SlcPoint = [SlcPoint,SPt];
    setappdata(hObject,'SlcPoint',SlcPoint);
    %% 计算立方体的最小最大高度并存储,并且显示在底部高度和顶部高度的文字框中
    H_D = min(pcData(in,3));
    H_T = max(pcData(in,3));
    for ii = 1:5
        L(ii).ZData = [H_T+0.5,H_T+0.5];
    end
    H_Dtemp = getappdata(hObject,'H_D');
    H_Dtemp = [H_Dtemp,H_D];
    setappdata(hObject,'H_D',H_Dtemp);
    H_Ttemp = getappdata(hObject,'H_T');
    H_Ttemp = [H_Ttemp,H_T];
    setappdata(hObject,'H_T',H_Ttemp);
    set(handles.H_D,'String',num2str(H_D));
    set(handles.H_T,'String',num2str(H_T));
    %% 利用最小最大高度来生成立方体并存储
    Pt3 = [Y,repmat(H_D,4,1);Y,repmat(H_T,4,1)];
    Pt3_Draw = [Pt3(1:4,:);Pt3(1,:);Pt3(5:8,:);Pt3(5:6,:);Pt3(2:3,:);Pt3(7:8,:);Pt3(4,:)];
    Cb(1) = line(Pt3_Draw(:,1),Pt3_Draw(:,2),Pt3_Draw(:,3),'color',clr);
    Cb(2) = plot3(Pt3(:,1),Pt3(:,2),Pt3(:,3),['o',clr]);
    Cb(3) = line(O(:,1),O(:,2),repmat(H_D,2,1),'color',clr);
%     delete(L);
%     delete(Pt);
    Cube = getappdata(hObject,'Cube');
    Cube = [Cube,Cb];
    setappdata(hObject,'Cube',Cube);
    %% 将立方体投影在二维图像中并存储
    RT = getappdata(handles.DS_Figure,'RT');
    I = getappdata(handles.DS_Figure,'Image');
    Pt2_Draw = show_laser_to_image4(I,Pt3_Draw,RT.R,RT.t);
    Pt2_Direct = show_laser_to_image4(I,[O(:,1),O(:,2),repmat(H_D,2,1)],RT.R,RT.t);
    axes(handles.axes_pic);
    Cb2d(1) = line(Pt2_Draw(:,1),Pt2_Draw(:,2),'color',clr);
    Cb2d(2) = line(Pt2_Direct(:,1),Pt2_Direct(:,2),'color',clr);
    Cube2d = getappdata(hObject,'Cube2d');
    Cube2d = [Cube2d,Cb2d];
    setappdata(hObject,'Cube2d',Cube2d);
    %% 将画出的直线L(1:5)存储起来留待调整使用
    AdjLine = getappdata(handles.axes_laser,'AdjLine');
    AdjLine = [AdjLine;L];
    setappdata(handles.axes_laser,'AdjLine',AdjLine);
    %% 激活H_D, H_T, DEL和SV
    set(handles.H_D,'Enable','on');
    set(handles.H_T,'Enable','on');
    set(handles.DEL,'Enable','on');
    set(handles.SV,'Enable','on');
    %% 重置存储标志
    setappdata(handles.DS_Figure,'SVflag',0);
end
if strcmp(get(handles.DS_Figure,'SelectionType'),'alt')
    CFtemp = getappdata(hObject,'ClassFlag');
    Vt2dtemp = getappdata(hObject,'Vertex2d');
    HDtemp = getappdata(hObject,'H_D');
    HTtemp = getappdata(hObject,'H_T');
    Otemp = getappdata(hObject,'Direct');
    SPttemp = getappdata(hObject,'SlcPoint');
    CBtemp = getappdata(hObject,'Cube');
    CB2dtemp = getappdata(hObject,'Cube2d');
    if ~isempty(CFtemp)
        CFtemp(end) = [];
        setappdata(hObject,'ClassFlag',CFtemp);
    end
    if ~isempty(Vt2dtemp)
        Vt2dtemp(end-3:end,:) = [];
        setappdata(hObject,'Vertex2d',Vt2dtemp);
    end
    if ~isempty(HDtemp)
        HDtemp(end) = [];
        setappdata(hObject,'H_D',HDtemp);
        if ~isempty(HDtemp)
            set(handles.H_D,'String',num2str(HDtemp(end)));
        else
            set(handles.H_D,'String','');
        end;
    end
    if ~isempty(HTtemp)
        HTtemp(end) = [];
        setappdata(hObject,'H_T',HTtemp);
        if ~isempty(HTtemp)
            set(handles.H_T,'String',num2str(HTtemp(end)));
        else
            set(handles.H_T,'String','');
        end
    end
    if ~isempty(Otemp)
        Otemp(end-1:end,:) = [];
        setappdata(hObject,'Direct',Otemp);
    end
    if ~isempty(SPttemp)
        delete(SPttemp(end));
        SPttemp(end) = [];
        setappdata(hObject,'SlcPoint',SPttemp);
    end
    if ~isempty(CBtemp)
        delete(CBtemp(end-2:end));
        CBtemp(end-2:end) = [];
        if isempty(CBtemp)
            set(handles.H_D,'Enable','off');
            set(handles.H_T,'Enable','off');
            set(handles.DEL,'Enable','off');
            set(handles.SV,'Enable','off');
        end
        setappdata(hObject,'Cube',CBtemp);
    end
    if ~isempty(CB2dtemp)
        delete(CB2dtemp(end-1:end));
        CB2dtemp(end-1:end) = [];
        setappdata(hObject,'Cube2d',CB2dtemp);
    end
    %% 重置存储标志
    setappdata(handles.DS_Figure,'SVflag',0);
end
% --- Executes on button press in DIR.
function DIR_Callback(hObject, eventdata, handles)
% hObject    handle to DIR (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if ~exist('folder.txt','file')
    folder_name  = uigetdir('','选择数据文件夹');
    if isequal(folder_name,0)
        return
    end
    folder_laser = uigetdir(folder_name,'选择激光数据文件夹');
    folder_pic = uigetdir(folder_name,'选择图像数据文件夹');
    if isequal(folder_name,0) || isequal(folder_laser,0) || isequal(folder_pic,0)
        return
    end
    fid = fopen('folder.txt','w');
    fprintf(fid,'%s\n',folder_name);
    fprintf(fid,'%s\n',folder_laser);
    fprintf(fid,'%s\n',folder_pic);
else
    btnName = questdlg('是否使用上一次的图像激光数据文件夹？','提示','使用','不使用','使用');
    switch btnName
        case '使用'
            fid = fopen('folder.txt');
            folder_name = fgetl(fid);
            folder_laser = fgetl(fid);
            folder_pic = fgetl(fid);
        case '不使用'
            folder_name  = uigetdir('','选择数据文件夹');
            if isequal(folder_name,0)
                return
            end
            folder_laser = uigetdir(folder_name,'选择激光数据文件夹');
            folder_pic = uigetdir(folder_name,'选择图像数据文件夹');
            if isequal(folder_name,0) || isequal(folder_laser,0) || isequal(folder_pic,0)
                return
            end
            fid = fopen('folder.txt','w');
            fprintf(fid,'%s\n',folder_name);
            fprintf(fid,'%s\n',folder_laser);
            fprintf(fid,'%s\n',folder_pic);
        otherwise
            return
    end
end
setappdata(handles.DS_Figure,'LaserRoot',[folder_laser,'\']);
setappdata(handles.DS_Figure,'PicRoot',[folder_pic,'\']);
setappdata(handles.DS_Figure,'DataRoot',[folder_name,'\']);

PoseDataRoot = [folder_laser,'\SimplePose.txt'];
if ~exist(PoseDataRoot,'file')
    CvtPoseFun(laserRoot)
end
labelRoot = [folder_name,'\Label'];
if ~exist(labelRoot,'dir')
    mkdir(labelRoot);
end
setappdata(handles.DS_Figure,'labelRoot',[labelRoot,'\']);
L = load(PoseDataRoot);
setappdata(handles.DS_Figure,'SimPose',L);
RT = load([folder_name,'\Rt.mat']);
setappdata(handles.DS_Figure,'RT',RT);
set(handles.FRM,'Enable','on');
function FRM_Callback(hObject, eventdata, handles)
% hObject    handle to FRM (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of FRM as text
%        str2double(get(hObject,'String')) returns contents of FRM as a double
Ind = str2double(get(hObject,'String'));
setappdata(handles.DS_Figure,'Index',Ind);
DataRoot = getappdata(handles.DS_Figure,'DataRoot');
LaserRoot = getappdata(handles.DS_Figure,'LaserRoot');
L = getappdata(handles.DS_Figure,'SimPose');
PicRoot = getappdata(handles.DS_Figure,'PicRoot');
if ~isnan(Ind)
    axes(handles.axes_laser);
    hold on;
    cla;
    pcData = show3d(DataRoot,LaserRoot,Ind,L);
    setappdata(handles.DS_Figure,'pcData',pcData);
    view(2);
    axes(handles.axes_pic);
    cla;
    I = imread([PicRoot,num2str(Ind),'.jpg']);
    setappdata(handles.DS_Figure,'Image',I);
    imshow(I);
end
set(handles.PDE,'Enable','on');
set(handles.VEC,'Enable','on');
set(handles.CYC,'Enable','on');
set(handles.PRE,'Enable','on');
set(handles.NEX,'Enable','on');
% --- Executes during object creation, after setting all properties.
function FRM_CreateFcn(hObject, eventdata, handles)
% hObject    handle to FRM (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in VIEW.
function VIEW_Callback(hObject, eventdata, handles)
% hObject    handle to VIEW (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.axes_laser);
view(2);


% --- Executes on button press in SV.
function SV_Callback(hObject, eventdata, handles)
% hObject    handle to SV (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
labelRoot = getappdata(handles.DS_Figure,'labelRoot');
ind = str2double(get(handles.FRM,'String'));
ind = sprintf('%06d',ind);
txtRoot = [labelRoot,ind,'.txt'];
fid = fopen(txtRoot,'w');
CF = getappdata(handles.axes_laser,'ClassFlag');
Vt2d = getappdata(handles.axes_laser,'Vertex2d');
O = getappdata(handles.axes_laser,'Direct');
HD = getappdata(handles.axes_laser,'H_D');
HT = getappdata(handles.axes_laser,'H_T');
%order number(1),flag(1),string(1),Center(2),L1(parallel to direct 1),L2(vertical to direct 1),direct(2),H_D(1),H_T(1)
if isempty(CF)
    return
end
for i = 1:length(CF)
    fprintf(fid,'%d ',i);
    fprintf(fid,'%d ',CF(i));
    switch CF(i)
        case 1
            fprintf(fid,'%s ','pedestrian');
        case 2
            fprintf(fid,'%s ','vehicle');
        case 3
            fprintf(fid,'%s ','cyclist');
    end 
    Lflag = (Vt2d(4*i-3,:)-Vt2d(4*i-2,:))*(O(2*i-1,:)-O(2*i,:))';
    if abs(Lflag)<1e-10 
        L1 = norm(Vt2d(4*i-1,:)-Vt2d(4*i-2,:))/2;
        L2 = norm(Vt2d(4*i-3,:)-Vt2d(4*i-2,:))/2;
    else
        L2 = norm(Vt2d(4*i-1,:)-Vt2d(4*i-2,:))/2;
        L1 = norm(Vt2d(4*i-3,:)-Vt2d(4*i-2,:))/2;
    end
    fprintf(fid,'%f %f %f %f ',O(2*i-1,:),L1,L2);
    fprintf(fid,'%f %f ',O(2*i-1,:)-O(2*i,:));
    fprintf(fid,'%f %f\n',HD(i),HT(i));
end
setappdata(handles.DS_Figure,'SVflag',1);



function H_D_Callback(hObject, eventdata, handles)
% hObject    handle to H_D (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%% 重新获取相关画图数据
HTtemp = getappdata(handles.axes_laser,'H_T');
Vt2dtemp = getappdata(handles.axes_laser,'Vertex2d');
Otemp= getappdata(handles.axes_laser,'Direct');
SPttemp = getappdata(handles.axes_laser,'SlcPoint');
CBtemp = getappdata(handles.axes_laser,'Cube');
clr = getappdata(handles.DS_Figure,'color');
Y = Vt2dtemp(end-3:end,:);
O = Otemp(end-1:end,:);
%% 重新绘制三维矩形框并存储
axes(handles.axes_laser);
H_T = HTtemp(end);
H_D = str2double(get(hObject,'String'));
Pt3 = [Y,repmat(H_D,4,1);Y,repmat(H_T,4,1)];
Pt3_Draw = [Pt3(1:4,:);Pt3(1,:);Pt3(5:8,:);Pt3(5:6,:);Pt3(2:3,:);Pt3(7:8,:);Pt3(4,:)];
Cb(1) = line(Pt3_Draw(:,1),Pt3_Draw(:,2),Pt3_Draw(:,3),'color',clr);
Cb(2) = plot3(Pt3(:,1),Pt3(:,2),Pt3(:,3),['o',clr]);
Cb(3) = line(O(:,1),O(:,2),repmat(H_D,2,1),'color',clr);
delete(CBtemp(end-2:end));
Cube = getappdata(handles.axes_laser,'Cube');
Cube(end-2:end) = Cb;
setappdata(handles.axes_laser,'Cube',Cube);
%% 重新绘制立方体投影并存储
RT = getappdata(handles.DS_Figure,'RT');
I = getappdata(handles.DS_Figure,'Image');
Pt2_Draw = show_laser_to_image4(I,Pt3_Draw,RT.R,RT.t);
Pt2_Direct = show_laser_to_image4(I,[O(:,1),O(:,2),repmat(H_D,2,1)],RT.R,RT.t);
axes(handles.axes_pic);
Cb2d(1) = line(Pt2_Draw(:,1),Pt2_Draw(:,2),'color',clr);
Cb2d(2) = line(Pt2_Direct(:,1),Pt2_Direct(:,2),'color',clr);
Cube2d = getappdata(handles.axes_laser,'Cube2d');
delete(Cube2d(end-1:end));
Cube2d(end-1:end) = Cb2d;
setappdata(handles.axes_laser,'Cube2d',Cube2d);
%% 重新标记矩形框中的点并存储
pcData = getappdata(handles.DS_Figure,'pcData');
in = inpolygon(pcData(:,1),pcData(:,2),Y(:,1),Y(:,2));
pcData = pcData(in,:);
in = find(pcData(:,3)>H_D&pcData(:,3)<H_T);
axes(handles.axes_laser);
delete(SPttemp(end));
if ~isempty(in)
SPt = plot3(pcData(in,1),pcData(in,2),pcData(in,3),['d',clr]);
SPttemp(end) = SPt;
setappdata(handles.axes_laser,'SlcPoint',SPttemp);
end
%% 重新存储底部高度H_D
HDtemp = getappdata(handles.axes_laser,'H_D');
HDtemp(end) = H_D;
setappdata(handles.axes_laser,'H_D',HDtemp);
%% 重置存储标志
setappdata(handles.DS_Figure,'SVflag',0);
% --- Executes during object creation, after setting all properties.
function H_D_CreateFcn(hObject, eventdata, handles)
% hObject    handle to H_D (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function H_T_Callback(hObject, eventdata, handles)
% hObject    handle to H_T (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%% 重新获取相关画图数据
HDtemp = getappdata(handles.axes_laser,'H_D');
Vt2dtemp = getappdata(handles.axes_laser,'Vertex2d');
Otemp= getappdata(handles.axes_laser,'Direct');
SPttemp = getappdata(handles.axes_laser,'SlcPoint');
CBtemp = getappdata(handles.axes_laser,'Cube');
clr = getappdata(handles.DS_Figure,'color');
Y = Vt2dtemp(end-3:end,:);
O = Otemp(end-1:end,:);
%% 重新绘制三维矩形框并存储
axes(handles.axes_laser);
H_D = HDtemp(end);
H_T = str2double(get(hObject,'String'));
Pt3 = [Y,repmat(H_D,4,1);Y,repmat(H_T,4,1)];
Pt3_Draw = [Pt3(1:4,:);Pt3(1,:);Pt3(5:8,:);Pt3(5:6,:);Pt3(2:3,:);Pt3(7:8,:);Pt3(4,:)];
Cb(1) = line(Pt3_Draw(:,1),Pt3_Draw(:,2),Pt3_Draw(:,3),'color',clr);
Cb(2) = plot3(Pt3(:,1),Pt3(:,2),Pt3(:,3),['o',clr]);
Cb(3) = line(O(:,1),O(:,2),repmat(H_D,2,1),'color',clr);
delete(CBtemp(end-2:end));
Cube = getappdata(handles.axes_laser,'Cube');
Cube(end-2:end) = Cb;
setappdata(handles.axes_laser,'Cube',Cube);
%% 重新绘制立方体投影并存储
RT = getappdata(handles.DS_Figure,'RT');
I = getappdata(handles.DS_Figure,'Image');
Pt2_Draw = show_laser_to_image4(I,Pt3_Draw,RT.R,RT.t);
Pt2_Direct = show_laser_to_image4(I,[O(:,1),O(:,2),repmat(H_D,2,1)],RT.R,RT.t);
axes(handles.axes_pic);
Cb2d(1) = line(Pt2_Draw(:,1),Pt2_Draw(:,2),'color',clr);
Cb2d(2) = line(Pt2_Direct(:,1),Pt2_Direct(:,2),'color',clr);
Cube2d = getappdata(handles.axes_laser,'Cube2d');
delete(Cube2d(end-1:end));
Cube2d(end-1:end) = Cb2d;
setappdata(handles.axes_laser,'Cube2d',Cube2d);
%% 重新标记矩形框中的点并存储
pcData = getappdata(handles.DS_Figure,'pcData');
in = inpolygon(pcData(:,1),pcData(:,2),Y(:,1),Y(:,2));
pcData = pcData(in,:);
in = find(pcData(:,3)>H_D&pcData(:,3)<H_T);
axes(handles.axes_laser);
delete(SPttemp(end));
if ~isempty(in)
SPt = plot3(pcData(in,1),pcData(in,2),pcData(in,3),['d',clr]);
SPttemp(end) = SPt;
setappdata(handles.axes_laser,'SlcPoint',SPttemp);
end
%% 重新存储底部高度H_T
HTtemp = getappdata(handles.axes_laser,'H_T');
HTtemp(end) = H_T;
setappdata(handles.axes_laser,'H_T',HTtemp);
%% 重置存储标志
setappdata(handles.DS_Figure,'SVflag',0);


% --- Executes during object creation, after setting all properties.
function H_T_CreateFcn(hObject, eventdata, handles)
% hObject    handle to H_T (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function Recfun(handles)
hObject.Selected = 'on';
A = handles.DS_Figure;
set(A,'WindowButtonMotionFcn',@MovRectangleFun)
% --- Executes on key press with focus on DS_Figure or any of its controls.

function  MovRectangleFun()
1
function DS_Figure_WindowKeyPressFcn(hObject, eventdata, handles)
% hObject    handle to DS_Figure (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.FIGURE)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)
if strcmp(get(handles.DS_Figure,'CurrentCharacter'),' ')
    pFlag = getappdata(handles.DS_Figure,'PressFlag');
    if isempty(pFlag) || pFlag==1 
        setappdata(handles.DS_Figure,'PressFlag',0);
    elseif pFlag==0
        setappdata(handles.DS_Figure,'PressFlag',1);
    end
end

 

% --- Creates and returns a handle to the GUI figure. 
function h1 = DataSet_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end
load DataSet_export.mat


appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 5, ...
    'axes', 3, ...
    'pushbutton', 15, ...
    'uipanel', 2, ...
    'edit', 9, ...
    'uitoolbar', 2, ...
    'uitoggletool', 5), ...
    'override', [], ...
    'release', [], ...
    'resize', 'simple', ...
    'accessibility', 'callback', ...
    'mfile', [], ...
    'callbacks', [], ...
    'singleton', [], ...
    'syscolorfig', [], ...
    'blocking', 0, ...
    'lastSavedFile', 'C:\Users\57326\Documents\MATLAB\数据集软件\DataSet_export.m', ...
    'lastFilename', 'C:\Users\57326\Documents\MATLAB\数据集软件\DataSet.fig');
appdata.lastValidTag = 'DS_Figure';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'DS_Figure');

h1 = figure(...
'Units','characters',...
'Position',[135.8 10.5 341.6 65.2857142857143],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'CurrentAxesMode','manual',...
'IntegerHandle','off',...
'WindowButtonDownFcn',blanks(0),...
'WindowButtonUpFcn',blanks(0),...
'WindowKeyPressFcn',@(hObject,eventdata)DataSet_export('DS_Figure_WindowKeyPressFcn',hObject,eventdata,guidata(hObject)),...
'MenuBar','none',...
'Name','DataSet',...
'NumberTitle','off',...
'Resize',get(0,'defaultfigureResize'),...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'ScreenPixelsPerInchMode','manual',...
'ParentMode','manual',...
'HandleVisibility','callback',...
'Tag','DS_Figure',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axes_laser';

h2 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units',get(0,'defaultaxesUnits'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[-0.000585480093676815 0.561269146608315 0.997658079625293 0.429978118161926],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[0.112651593132905 0.18006055324463 0.0823223180586614 0.122768559030429],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'PlotBoxAspectRatio',[1 0.230633802816901 0.230633802816901],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'XTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XAxisMode',get(0,'defaultaxesXAxisMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YAxisMode',get(0,'defaultaxesYAxisMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZAxisMode',get(0,'defaultaxesZAxisMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'ButtonDownFcn',@(hObject,eventdata)DataSet_export('axes_laser_ButtonDownFcn',hObject,eventdata,guidata(hObject)),...
'Tag','axes_laser',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000476837158 1.00699745547074 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','bold',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.0602205245802216 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.0166275427036909 0.500000476837158 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'axes_pic';

h7 = axes(...
'Parent',h1,...
'FontUnits',get(0,'defaultaxesFontUnits'),...
'Units',get(0,'defaultaxesUnits'),...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'CameraTarget',[0.5 0.5 0.5],...
'CameraTargetMode',get(0,'defaultaxesCameraTargetMode'),...
'CameraViewAngle',6.60861036031192,...
'CameraViewAngleMode',get(0,'defaultaxesCameraViewAngleMode'),...
'Position',[-0.000585480093676815 -0.00109409190371991 0.440281030444965 0.562363238512035],...
'ActivePositionProperty','position',...
'ActivePositionPropertyMode',get(0,'defaultaxesActivePositionPropertyMode'),...
'LooseInset',[0.204673359272555 0.145119363971413 0.14956899331456 0.0989450208896001],...
'LooseInsetMode',get(0,'defaultaxesLooseInsetMode'),...
'PlotBoxAspectRatio',[1 0.683510638297872 0.683510638297872],...
'PlotBoxAspectRatioMode',get(0,'defaultaxesPlotBoxAspectRatioMode'),...
'XTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'XTickMode',get(0,'defaultaxesXTickMode'),...
'XTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'XTickLabelMode',get(0,'defaultaxesXTickLabelMode'),...
'YTick',[0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1],...
'YTickMode',get(0,'defaultaxesYTickMode'),...
'YTickLabel',{  '0'; '0.1'; '0.2'; '0.3'; '0.4'; '0.5'; '0.6'; '0.7'; '0.8'; '0.9'; '1' },...
'YTickLabelMode',get(0,'defaultaxesYTickLabelMode'),...
'SortMethod','childorder',...
'SortMethodMode',get(0,'defaultaxesSortMethodMode'),...
'CameraMode',get(0,'defaultaxesCameraMode'),...
'DataSpaceMode',get(0,'defaultaxesDataSpaceMode'),...
'ColorSpaceMode',get(0,'defaultaxesColorSpaceMode'),...
'DecorationContainerMode',get(0,'defaultaxesDecorationContainerMode'),...
'ChildContainerMode',get(0,'defaultaxesChildContainerMode'),...
'XAxisMode',get(0,'defaultaxesXAxisMode'),...
'XBaselineMode',get(0,'defaultaxesXBaselineMode'),...
'YAxisMode',get(0,'defaultaxesYAxisMode'),...
'YBaselineMode',get(0,'defaultaxesYBaselineMode'),...
'ZAxisMode',get(0,'defaultaxesZAxisMode'),...
'ZBaselineMode',get(0,'defaultaxesZBaselineMode'),...
'AmbientLightSourceMode',get(0,'defaultaxesAmbientLightSourceMode'),...
'Tag','axes_pic',...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h8 = get(h7,'title');

set(h8,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0 0 0],...
'ColorMode','auto',...
'Position',[0.500000476837158 1.00535019455253 0.499999999999998],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','bold',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','Axes Title',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h9 = get(h7,'xlabel');

set(h9,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0.500000476837158 -0.0460440975876016 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','top',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h10 = get(h7,'ylabel');

set(h10,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[-0.0376773042115548 0.500000476837158 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',90,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',11,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','center',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','bottom',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','back',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','on',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

h11 = get(h7,'zlabel');

set(h11,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'DecorationContainer',[],...
'DecorationContainerMode','auto',...
'Color',[0.15 0.15 0.15],...
'ColorMode','auto',...
'Position',[0 0 0],...
'PositionMode','auto',...
'Interpreter','tex',...
'InterpreterMode','auto',...
'Rotation',0,...
'RotationMode','auto',...
'FontName','Helvetica',...
'FontNameMode','auto',...
'FontUnitsMode','auto',...
'FontSize',10,...
'FontSizeMode','auto',...
'FontAngle','normal',...
'FontAngleMode','auto',...
'FontWeight','normal',...
'FontWeightMode','auto',...
'HorizontalAlignment','left',...
'HorizontalAlignmentMode','auto',...
'VerticalAlignment','middle',...
'VerticalAlignmentMode','auto',...
'EdgeColor','none',...
'EdgeColorMode','auto',...
'LineStyle','-',...
'LineStyleMode','auto',...
'LineWidth',0.5,...
'LineWidthMode','auto',...
'BackgroundColor','none',...
'BackgroundColorMode','auto',...
'Margin',3,...
'MarginMode','auto',...
'Clipping','off',...
'ClippingMode','auto',...
'Layer','middle',...
'LayerMode','auto',...
'FontSmoothing','on',...
'FontSmoothingMode','auto',...
'UnitsMode','auto',...
'IncludeRenderer','on',...
'IsContainer','off',...
'IsContainerMode','auto',...
'HG1EraseMode','auto',...
'BusyAction','queue',...
'Interruptible','on',...
'HitTest','on',...
'HitTestMode','auto',...
'PickableParts','visible',...
'PickablePartsMode','auto',...
'XLimInclude','on',...
'XLimIncludeMode','auto',...
'YLimInclude','on',...
'YLimIncludeMode','auto',...
'ZLimInclude','on',...
'ZLimIncludeMode','auto',...
'CLimInclude','on',...
'CLimIncludeMode','auto',...
'ALimInclude','on',...
'ALimIncludeMode','auto',...
'Description','AxisRulerBase Label',...
'DescriptionMode','auto',...
'Visible','off',...
'VisibleMode','auto',...
'Serializable','on',...
'SerializableMode','auto',...
'HandleVisibility','off',...
'HandleVisibilityMode','auto',...
'TransformForPrintFcnImplicitInvoke','on',...
'TransformForPrintFcnImplicitInvokeMode','auto');

appdata = [];
appdata.lastValidTag = 'PDE';

h12 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','行人',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.497072599531616 0.394967177242888 0.0591334894613583 0.0568927789934354],...
'BackgroundColor',[0.941176470588235 0.941176470588235 0.941176470588235],...
'Callback',@(hObject,eventdata)DataSet_export('PDE_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','PDE',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'VEC';

h13 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','车辆',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.614168618266979 0.394967177242888 0.0591334894613583 0.0568927789934354],...
'Callback',@(hObject,eventdata)DataSet_export('VEC_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','VEC',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'text2';

h14 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'String','底部高度',...
'Style','text',...
'Position',[0.467798594847775 0.285557986870897 0.0304449648711944 0.0568927789934354],...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','text2',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'text3';

h15 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'String','顶部高度',...
'Style','text',...
'Position',[0.583723653395785 0.285557986870897 0.0304449648711944 0.0568927789934354],...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','text3',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'DEL';

h16 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','删除',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.497072599531616 0.176148796498906 0.0591334894613583 0.0568927789934355],...
'Callback',@(hObject,eventdata)DataSet_export('DEL_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','DEL',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'PRE';

h17 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','上一张',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.497072599531616 0.0667396061269147 0.0591334894613583 0.0568927789934355],...
'Callback',@(hObject,eventdata)DataSet_export('PRE_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','PRE',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'NEX';

h18 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','下一张',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.614168618266979 0.0656455142231947 0.0591334894613583 0.0579868708971554],...
'Callback',@(hObject,eventdata)DataSet_export('NEX_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','NEX',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'SV';

h19 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','保存',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.614168618266979 0.175054704595186 0.0591334894613583 0.0579868708971553],...
'Callback',@(hObject,eventdata)DataSet_export('SV_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','SV',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'CYC';

h20 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','骑行者',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.731264637002342 0.394967177242888 0.0591334894613583 0.0568927789934354],...
'Callback',@(hObject,eventdata)DataSet_export('CYC_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','CYC',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'DIR';

h21 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','选择文件夹',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.497072599531616 0.489059080962801 0.0591334894613583 0.0568927789934354],...
'Callback',@(hObject,eventdata)DataSet_export('DIR_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','DIR',...
'FontSize',13);

appdata = [];
appdata.lastValidTag = 'FRM';

h22 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String',' ',...
'Style','edit',...
'Position',[0.614754098360656 0.489059080962801 0.0702576112412178 0.0568927789934354],...
'BackgroundColor',[],...
'Callback',@(hObject,eventdata)DataSet_export('FRM_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)DataSet_export('FRM_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','FRM',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'text4';

h23 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'String','帧号',...
'Style','text',...
'Position',[0.583723653395785 0.50109409190372 0.0304449648711944 0.0317286652078774],...
'Children',[],...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','text4',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'uitoolbar1';

h24 = uitoolbar(...
'Parent',h1,...
'ChildrenMode','manual',...
'ParentMode','manual',...
'Tag','uitoolbar1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.toolid = 'Exploration.ZoomIn';
appdata.CallbackInUse = struct(...
    'ClickedCallback', '%default');
appdata.lastValidTag = 'uitoggletool1';

h25 = uitoggletool(...
'Parent',h24,...
'Serializable',get(0,'defaultuitoggletoolSerializable'),...
'Children',[],...
'CData',mat{1},...
'ClickedCallback','%default',...
'TooltipString','Zoom In',...
'ParentMode','manual',...
'HandleVisibility',get(0,'defaultuitoggletoolHandleVisibility'),...
'Tag','uitoggletool1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.toolid = 'Exploration.ZoomOut';
appdata.CallbackInUse = struct(...
    'ClickedCallback', '%default');
appdata.lastValidTag = 'uitoggletool2';

h26 = uitoggletool(...
'Parent',h24,...
'Serializable',get(0,'defaultuitoggletoolSerializable'),...
'Children',[],...
'CData',mat{2},...
'ClickedCallback','%default',...
'TooltipString','Zoom Out',...
'ParentMode','manual',...
'HandleVisibility',get(0,'defaultuitoggletoolHandleVisibility'),...
'Tag','uitoggletool2',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.toolid = 'Exploration.Pan';
appdata.CallbackInUse = struct(...
    'ClickedCallback', '%default');
appdata.lastValidTag = 'uitoggletool3';

h27 = uitoggletool(...
'Parent',h24,...
'Serializable',get(0,'defaultuitoggletoolSerializable'),...
'Children',[],...
'CData',mat{3},...
'ClickedCallback','%default',...
'TooltipString','Pan',...
'ParentMode','manual',...
'HandleVisibility',get(0,'defaultuitoggletoolHandleVisibility'),...
'Tag','uitoggletool3',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.toolid = 'Exploration.Rotate';
appdata.CallbackInUse = struct(...
    'ClickedCallback', '%default');
appdata.lastValidTag = 'uitoggletool4';

h28 = uitoggletool(...
'Parent',h24,...
'Serializable',get(0,'defaultuitoggletoolSerializable'),...
'Children',[],...
'CData',mat{4},...
'ClickedCallback','%default',...
'TooltipString','Rotate 3D',...
'ParentMode','manual',...
'HandleVisibility',get(0,'defaultuitoggletoolHandleVisibility'),...
'Tag','uitoggletool4',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'VIEW';

h29 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','恢复视角',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.731264637002342 0.489059080962801 0.0608899297423887 0.0568927789934354],...
'Callback',@(hObject,eventdata)DataSet_export('VIEW_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ParentMode','manual',...
'Tag','VIEW',...
'FontSize',13,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'H_D';

h30 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String',' H',...
'Style','edit',...
'Position',[0.497658079625293 0.286652078774617 0.0702576112412178 0.0568927789934355],...
'BackgroundColor',[],...
'Callback',@(hObject,eventdata)DataSet_export('H_D_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)DataSet_export('H_D_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','H_D',...
'FontSize',15);

appdata = [];
appdata.lastValidTag = 'H_T';

h31 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String',' H',...
'Style','edit',...
'Position',[0.614168618266979 0.286652078774617 0.0702576112412178 0.0568927789934355],...
'BackgroundColor',[],...
'Callback',@(hObject,eventdata)DataSet_export('H_T_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'KeyPressFcn',blanks(0),...
'ParentMode','manual',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)DataSet_export('H_T_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'Tag','H_T',...
'FontSize',15);


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % DATASET_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % DATASET_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % DATASET_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % DATASET_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


